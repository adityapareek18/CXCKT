"use strict";
/**
 * Created by Moiz.Kachwala on 15-06-2016.
 */
var SessionBusiness = require("./../app/business/SessionBusiness");
var SessionController = (function () {
    function SessionController() {
    }
    SessionController.prototype.create = function (req, res) {
        try {
            var session = req.body;
            var sessionBusiness = new SessionBusiness();
            sessionBusiness.create(session, function (error, result) {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send({ "success": "success" });
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    SessionController.prototype.update = function (req, res) {
        try {
            var session = req.body;
            var _id = req.params._id;
            var sessionBusiness = new SessionBusiness();
            sessionBusiness.update(_id, session, function (error, result) {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send({ "success": "success" });
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    SessionController.prototype.delete = function (req, res) {
        try {
            var _id = req.params._id;
            var sessionBusiness = new SessionBusiness();
            sessionBusiness.delete(_id, function (error, result) {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send({ "success": "success" });
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    SessionController.prototype.retrieve = function (req, res) {
        try {
            var sessionBusiness = new SessionBusiness();
            sessionBusiness.retrieve(function (error, result) {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send(result);
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    SessionController.prototype.findById = function (req, res) {
        try {
            var _id = req.params._id;
            var sessionBusiness = new SessionBusiness();
            sessionBusiness.findById(_id, function (error, result) {
                if (error)
                    res.send({ "error": "error" });
                else
                    res.send(result);
            });
        }
        catch (e) {
            console.log(e);
            res.send({ "error": "error in your request" });
        }
    };
    return SessionController;
}());
module.exports = SessionController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
